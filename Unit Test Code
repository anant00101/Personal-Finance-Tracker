package com.example.finance;

import com.example.finance.dao.UserDAO;
import com.example.finance.model.User;
import com.example.finance.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UserServiceAndDAOTest {

    private UserService userService;
    private UserDAO userDAO;

    @BeforeEach
    void setUp() {
        userDAO = Mockito.mock(UserDAO.class);
        userService = new UserService(userDAO);
    }

    @Test
    void testGetUserByUsername_ServiceLayer() {
        User user = new User("john", "John Doe", "john@example.com");
        when(userDAO.findByUsername("john")).thenReturn(user);

        User result = userService.getUserByUsername("john");

        assertNotNull(result);
        assertEquals("John Doe", result.getFullName());
        verify(userDAO).findByUsername("john");
    }

    @Test
    void testRegisterUser_ServiceLayer_Success() {
        User user = new User("jane", "Jane Smith", "jane@example.com");
        when(userDAO.findByUsername("jane")).thenReturn(null);

        boolean isRegistered = userService.registerUser(user);

        assertTrue(isRegistered);
        verify(userDAO).save(user);
    }

    @Test
    void testRegisterUser_ServiceLayer_Failure() {
        User user = new User("john", "John Doe", "john@example.com");
        when(userDAO.findByUsername("john")).thenReturn(user);

        boolean isRegistered = userService.registerUser(user);

        assertFalse(isRegistered);
        verify(userDAO, never()).save(any(User.class));
    }

    @Test
    void testFindByUsername_DAOLayer() {
        User user = new User("john", "John Doe", "john@example.com");
        userDAO = new UserDAO();
        userDAO.save(user);

        User result = userDAO.findByUsername("john");

        assertNotNull(result);
        assertEquals("John Doe", result.getFullName());
    }

    @Test
    void testSave_DAOLayer() {
        User user = new User("jane", "Jane Smith", "jane@example.com");
        userDAO = new UserDAO();

        userDAO.save(user);
        User result = userDAO.findByUsername("jane");

        assertNotNull(result);
        assertEquals("Jane Smith", result.getFullName());
    }
}
